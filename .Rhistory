labs(title = "Life Expectancy VS Median Household Income in " + yr)
return(plot)
}
le_vs_mhinc_plot(2010)
le_vs_mhinc_plot <- function(yr){
plot <- ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = df$median_income_perhousehold), size = pop_fix, fill = four_regions) +
geom_point() +
labs(title = "Life Expectancy VS Median Household Income in " + str(yr))
return(plot)
}
le_vs_mhinc_plot(2010)
le_vs_mhinc_plot <- function(yr){
plot <- ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = df$median_income_perhousehold), size = pop_fix, fill = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
return(plot)
}
le_vs_mhinc_plot(2010)
ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = df$median_income_perhousehold), size = pop_fix, fill = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
yr = 2004
gplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = df$median_income_perhousehold), size = pop_fix, fill = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = df$median_income_perhousehold), size = pop_fix, fill = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold), size = pop_fix, fill = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix), fill = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix), fill = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix), fill = four_regions) +
geom_point()
##df$pop_fix <- mapply(string_to_num,df$Population)
df$pop_fix <- NULL
for(string in df$Population){
numver <- string_to_num(string)
df$pop_fix[nrow(pop_fix) + 1, ] <- numver
}
for(num in nrows(df$Population)){
string <- df[num]
numver <- string_to_num(string)
df$pop_fix[num + 1, ] <- numver
}
for(num in nrow(df$Population)){
string <- df[num]
numver <- string_to_num(string)
df$pop_fix[num + 1, ] <- numver
}
View(df)
for(num in nrow(df$Population)){
string <- df[num]
numver <- string_to_num(string)
df$pop_fix[num + 1, ] <- numver
}
for(num in 1:nrow(df$Population)){
string <- df[num]
numver <- string_to_num(string)
df$pop_fix[num + 1, ] <- numver
}
for(num in 1:length(df$Population)){
string <- df[num]
numver <- string_to_num(string)
df$pop_fix[num + 1, ] <- numver
}
df[df$name == "Norway" & df$Year == 1940, "pop_fix"]
for(num in 1:length(df$Population)){
stringver <- df[num]
numver <- string_to_num(stringver)
df$pop_fix[num + 1, ] <- numver
}
# column is "character" (also known as a "String datatype"). Before we can
# visualize the data, you'll need to convert the Population column to a numeric
# type and store this new value into a column in your `df` called `pop_fix`.
# HINT 1 - First figure out how to remove the "M", "k", or "B" character from population
# values, then figure out how to transform the values into numbers, and then
# multiply each value by the correct amount. You need to keep track of the units!
# Populations with the B character need to be multiplied by 1000000000; the ones
# with the M character need to be multiplied by 1000000 and k need to be
# multiplied by 1000.
# HINT 2 - The as.numeric function in R can help you transform strings into numbers!
string_to_num <- function(string){
if(is.na(string)){
return(NULL)
} else {
multby <- 1
if(str_detect(string, "B")){
multby <- 1000000000
} else if (str_detect(string, "M")){
multby <- 1000000
} else if (str_detect(string, "k")){
multby <- 1000
}
num <- as.numeric(str_sub(string, end = -2))
return(as.numeric(num* multby))
}
}
for(num in 1:length(df$Population)){
stringver <- df[num]
numver <- string_to_num(stringver)
df$pop_fix[num + 1, ] <- numver
}
for(num in 1:length(df$Population)){
stringver <- df$Population[num]
numver <- string_to_num(stringver)
df$pop_fix[num + 1, ] <- numver
}
for(num in 1:length(df$Population)){
stringver <- df$Population[num]
numver <- string_to_num(stringver)
df$pop_fix[num + 1] <- numver
}
df[df$name == "Norway" & df$Year == 1940, "pop_fix"]
for(num in 1:length(df$Population)){
stringver <- df$Population[num]
numver <- string_to_num(stringver)
df$pop_fix[num] <- numver
}
df[df$name == "Norway" & df$Year == 1940, "pop_fix"]
expect_equal( df[df$name == "Norway" & df$Year == 1940, "pop_fix"], 3000000)
##df$pop_fix <- mapply(string_to_num,df$Population)
df$pop_fix <- NULL
for(num in 1:length(df$Population)){
stringver <- df$Population[num]
numver <- string_to_num(stringver)
df$pop_fix[num] <- numver
}
expect_equal( df[df$name == "Norway" & df$Year == 1940, "pop_fix"], 3000000)
df$pop_fix <- mapply(string_to_num,df$Population)
df[df$name == "Norway" & df$Year == 1940, "pop_fix"]
expect_equal( df[df$name == "Norway" & df$Year == 1940, "pop_fix"], 3000000)
setwd("C:/repo/final-projects-samguern")
library(dplyr)
library(stringr)
mentalHealth <- read.csv("mxmh_survey_results.csv")
mentalHealth <- na.omit(mentalHealth)
spotifyData <- read.csv("Spotify_data.csv")
spotifyData <- na.omit(spotifyData)
filtered_Spotify <- filter(mentalHealth, str_detect(Primary.streaming.service, "Spotify"),)
age_group <- function(age){
if(is.na(age) || age < 6){
return(NULL)
}
if(age > 60){
return("60+")
} else if (age >= 35){
return("35-60")
} else if (age >= 20){
return("20-35")
} else if (age >= 12){
return("12-20")
} else if (age >= 6){
return("6-12")
}
}
filtered_Spotify$Age.group <-mapply(age_group, filtered_Spotify$Age)
filtered_Spotify <- aggregate(cbind(Anxiety, Depression, OCD) ~ Age.group, data = filtered_Spotify, mean)
View(filtered_Spotify)
filtered_Spotify <- filter(mentalHealth, str_detect(Primary.streaming.service, "Spotify"),)
filtered_Spotify$Age.group <-mapply(age_group, filtered_Spotify$Age)
filtered_Spotify <- aggregate(cbind(Anxiety, Depression, OCD, Hours.per.day) ~ Age.group, data = filtered_Spotify, mean)
filtered_Spotify <- filter(mentalHealth, str_detect(Primary.streaming.service, "Spotify"),)
filtered_Spotify$Age.group <-mapply(age_group, filtered_Spotify$Age)
summarized_filtered_Spotify <- aggregate(cbind(Anxiety, Depression, OCD, Hours.per.day) ~ Age.group, data = filtered_Spotify, mean)
getMode <- function(v){
uniquevar <- unique(v)
uniquevar[which.max(tabulate(match(v, uniquevar)))]
}
summarized_spotifyData <- aggregate(cbind(music_time_slot, spotify_listening_device) ~ Age, data = spotifyData, getMode)
View(summarized_spotifyData)
age_group_spotify_summary <- left_join(summarized_filtered_Spotify, summarized_spotifyData, by = c("Age.group" = "Age"))
View(age_group_spotify_summary)
write.csv("age_group_spotify_summary.csv")
write.csv(age_group_spotify_summary.csv)
write.csv(age_group_spotify_summary)
write.csv(age_group_spotify_summary, "C:/repo/final-projects-samguern/age_group_spotify_summary.csv", row.names=FALSE)
setwd("C:/Users/tzhan/OneDrive - UW/Info 201/HW4")
for(num in 1:nrow(df)){
df[num, "pop_fix"] <- as.numeric(string_to_num(df[i, "Population"]))
}
#all library statements must be at the top of the page!
library(dplyr)
library(stringr)
library(ggplot2)
library(testthat)
# Loads in your datasets
country_df <- read.csv("country_data.csv") #DO NOT CHANGE!
geo_df <- read.csv("geographies.csv") #DO NOT CHANGE!
# First, merge your two dataframes using a left join on the geo_df with the
# country_df and store the combined dataframe into a variable `df`. You need to
# join based on the names of the countries.
df <- left_join(geo_df, country_df, by = c("name" = "country"))
# column is "character" (also known as a "String datatype"). Before we can
# visualize the data, you'll need to convert the Population column to a numeric
# type and store this new value into a column in your `df` called `pop_fix`.
# HINT 1 - First figure out how to remove the "M", "k", or "B" character from population
# values, then figure out how to transform the values into numbers, and then
# multiply each value by the correct amount. You need to keep track of the units!
# Populations with the B character need to be multiplied by 1000000000; the ones
# with the M character need to be multiplied by 1000000 and k need to be
# multiplied by 1000.
# HINT 2 - The as.numeric function in R can help you transform strings into numbers!
string_to_num <- function(string){
if(is.na(string)){
return(NULL)
} else {
multby <- 1
if(str_detect(string, "B")){
multby <- 1000000000
} else if (str_detect(string, "M")){
multby <- 1000000
} else if (str_detect(string, "k")){
multby <- 1000
}
num <- as.numeric(str_sub(string, end = -2))
return(as.numeric(num* multby))
}
}
for(num in 1:nrow(df)){
df[num, "pop_fix"] <- as.numeric(string_to_num(df[i, "Population"]))
}
for(num in 1:nrow(df)){
df[num, "pop_fix"] <- as.numeric(string_to_num(df[num, "Population"]))
}
# column is "character" (also known as a "String datatype"). Before we can
# visualize the data, you'll need to convert the Population column to a numeric
# type and store this new value into a column in your `df` called `pop_fix`.
# HINT 1 - First figure out how to remove the "M", "k", or "B" character from population
# values, then figure out how to transform the values into numbers, and then
# multiply each value by the correct amount. You need to keep track of the units!
# Populations with the B character need to be multiplied by 1000000000; the ones
# with the M character need to be multiplied by 1000000 and k need to be
# multiplied by 1000.
# HINT 2 - The as.numeric function in R can help you transform strings into numbers!
string_to_num <- function(string){
if(!is.na(string)){
if(str_detect(string, "B")){
multby <- 1000000000
} else if (str_detect(string, "M")){
multby <- 1000000
} else if (str_detect(string, "k")){
multby <- 1000
}
num <- as.numeric(str_sub(string, 1, str_length(string)-1))
return(num* multby)
}else{
return(string)
}
}
for(num in 1:nrow(df)){
df[num, "pop_fix"] <- as.numeric(string_to_num(df[num, "Population"]))
}
# column is "character" (also known as a "String datatype"). Before we can
# visualize the data, you'll need to convert the Population column to a numeric
# type and store this new value into a column in your `df` called `pop_fix`.
# HINT 1 - First figure out how to remove the "M", "k", or "B" character from population
# values, then figure out how to transform the values into numbers, and then
# multiply each value by the correct amount. You need to keep track of the units!
# Populations with the B character need to be multiplied by 1000000000; the ones
# with the M character need to be multiplied by 1000000 and k need to be
# multiplied by 1000.
# HINT 2 - The as.numeric function in R can help you transform strings into numbers!
string_to_num <- function(string){
if(!is.na(string)){
multby <- 1
if(str_detect(string, "B")){
multby <- 1000000000
} else if (str_detect(string, "M")){
multby <- 1000000
} else if (str_detect(string, "k")){
multby <- 1000
}
num <- as.numeric(str_sub(string, 1, str_length(string)-1))
return(num* multby)
}else{
return(string)
}
}
for(num in 1:nrow(df)){
df[num, "pop_fix"] <- as.numeric(string_to_num(df[num, "Population"]))
}
df[df$name == "Norway" & df$Year == 1940, "pop_fix"]
expect_equal( df[df$name == "Norway" & df$Year == 1940, "pop_fix"], 3000000)
ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix), color = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
le_vs_mhinc_plot <- function(yr){
plot <- ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix), color = four_regions) +
geom_point() +
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
return(plot)
}
le_vs_mhinc_plot(2010)
le_vs_mhinc_plot <- function(yr){
plot <- ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix), color = four_regions) +
geom_point(alpha = 0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
return(plot)
}
le_vs_mhinc_plot(2010)
le_vs_mhinc_plot <- function(yr){
plot <- ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix, color = four_regions)) +
geom_point(alpha = 0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
labs(title = paste("Life Expectancy VS Median Household Income in ", yr))
return(plot)
}
le_vs_mhinc_plot(2010)
#To run the test file, uncomment the line below before running source.
test_file("hw4_test.r")
source("C:/Users/tzhan/OneDrive - UW/Info 201/HW4/hw4.R")
# column is "character" (also known as a "String datatype"). Before we can
# visualize the data, you'll need to convert the Population column to a numeric
# type and store this new value into a column in your `df` called `pop_fix`.
# HINT 1 - First figure out how to remove the "M", "k", or "B" character from population
# values, then figure out how to transform the values into numbers, and then
# multiply each value by the correct amount. You need to keep track of the units!
# Populations with the B character need to be multiplied by 1000000000; the ones
# with the M character need to be multiplied by 1000000 and k need to be
# multiplied by 1000.
# HINT 2 - The as.numeric function in R can help you transform strings into numbers!
string_to_num <- function(string){
if(!is.na(string)){
multby <- 1
if(str_detect(string, "B")){
multby <- 1000000000
num <- as.numeric(str_sub(string, 1, str_length(string)-1))
} else if (str_detect(string, "M")){
multby <- 1000000
num <- as.numeric(str_sub(string, 1, str_length(string)-1))
} else if (str_detect(string, "k")){
multby <- 1000
num <- as.numeric(str_sub(string, 1, str_length(string)-1))
} else {
num <- as.numeric(string)
}
return(num* multby)
}else{
return(string)
}
}
for(num in 1:nrow(df)){
df[num, "pop_fix"] <- as.numeric(string_to_num(df[num, "Population"]))
}
#To run the test file, uncomment the line below before running source.
test_file("hw4_test.r")
le_vs_mhinc_plot <- function(yr){
plot <- ggplot(data=filter(df, Year == yr), mapping = aes(x= life_expectancy_years,
y = median_income_perhousehold, size = pop_fix, color = four_regions)) +
geom_point(alpha = 0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
labs(title = paste("Life Expectancy VS Median Household Income in ", yr),
x="Life Expectancy in years", y = "Median Income per Household",
color = "Four Regions")
return(plot)
}
le_vs_mhinc_plot(2010)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source("hw4.R") #Change this line to the name of your homework file
```{r fig5, fig.height = 5, fig.width = 8, echo=FALSE}
#plot your carbon_em_lineplot here
plot(carbon_em_lineplot)
ggplot(data = high_inc, mapping = aes( x = with(high_inc, reorder(name, avg_carb)), y = avg_carb)) +
geom_bar(stat = "identity") +
geom_hline(yintercept = mean(high_inc$avg_carb), color = "blue") +
labs(y = "Mean Carbon footprint per Capita", x = "Country Name") +
coord_flip()
setwd("C:/repo/final-projects-samguern")
source("C:/repo/final-projects-samguern/main.R")
View(filtered_Spotify)
View(spotifyData)
age_group_spotify_summary$Num_Reponses <- aggregate(x ~ Age.group, data = filtered_Spotify, length)
age_group_spotify_summary$Count <-aggregate(cbind(filtered_Spotify$Age.group, spotifyData$Age), by=list(age_group), FUN=sum, na.rm=TRUE)
count(filtered_Spotify$Age.group)
table(filtered_Spotify$Age.group)
table(spotifyData$Age)
age_group_spotify_summary$Count <- table(filtered_Spotify$Age.group) + table(spotifyData$Age)
age_group_spotify_summary$Count <-
count(table(filtered_Spotify$Age.group))
age_group_spotify_summary$Count <-
count(filtered_Spotify$Age.group)
filtered_Spotify %>%
count(Age.group)
age_group_spotify_summary$Count <-
table(filtered_Spotify$Age.group)
age_group_spotify_summary$Count <-
table(filtered_Spotify$Age.group)
table(spotifyData$Age)
age_group_spotify_summary$Count <-
summarize(filtered_Spotify$Age.group)
age_group_spotify_summary$Count <-
filtered_Spotify$Age.group$summarize()
for(num in nrow(spotifyData)){
age_group_spotify_summary[spotifyData$Age[num], "Num_Responses"] <- age_group_spotify_summary[spotifyData$Age[num], "Num_Responses"] +1
}
View(age_group_spotify_summary)
filtered_spofityData <- filter(spotifyData, str_detect(Age, "6-12"))
age_group_spotify_summary$Count <- NULL
for(num in nrow(filtered_spotifyData)){
age_group_spotify_summary[filtered_spotifyData$Age[num], "Num_Responses"] <- age_group_spotify_summary[spotifyData$Age[num], "Num_Responses"] +1
}
filtered_spofityData <- filter(spotifyData, str_detect(Age, "6-12"))
for(num in nrow(filtered_spofityData)){
age_group_spotify_summary[filtered_spotifyData$Age[num], "Num_Responses"] <- age_group_spotify_summary[spotifyData$Age[num], "Num_Responses"] +1
}
for(num in nrow(filtered_spofityData)){
age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] <- age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] +1
}
for(num in nrow(filtered_spofityData)){
age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] <- age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] +1
}
age_group_spotify_summary$Num_Responses <- 0
for(num in nrow(filtered_spofityData)){
age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] <- age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] +1
}
filtered_spofityData <- filter(spotifyData, str_detect(Age, "6-12") == FALSE)
age_group_spotify_summary$Num_Responses <- 0
for(num in nrow(filtered_spofityData)){
age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] <- age_group_spotify_summary[filtered_spofityData$Age[num], "Num_Responses"] +1
}
age_group_spotify_summary[which(Age.group == filtered_spofityData$Age[num]), "Num_Responses"] <- age_group_spotify_summary[which(Age.group == filtered_spofityData$Age[num]), "Num_Responses"] +1
for(num in nrow(filtered_spofityData)){
age_group_spotify_summary[which(age_group_spotify_summary$Age.group == filtered_spofityData$Age[num]), "Num_Responses"] <- age_group_spotify_summary[which(age_group_spotify_summary$Age.group == filtered_spofityData$Age[num]), "Num_Responses"] +1
}
table(filtered_Spotify$Age.group)
table(spotifyData$Age)
age_counts_mentalh <- table(filtered_Spotify$Age.group)
age_counts_spotify <- table(spotifyData$Age)
age_counts_mentalh <- table(filtered_Spotify$Age.group)
age_counts_spotify <- table(filtered_spotifyDataa$Age)
age_counts_spotify <- table(filtered_spotifyData$Age)
age_counts_spotify <- table(filtered_spotifyData$Age)
age_counts_spotify <- table(filtered_spofityData$Age)
age_counts <- left_join(age_counts_mentalh, age_counts_mentalh)
age_counts <- merge(age_counts_mentalh, age_counts_mentalh)
View(age_counts)
age_counts <- merge(age_counts_mentalh, age_counts_mentalh, by = c("Age.group" = "Age"))
age_counts <- merge(age_counts_mentalh, age_counts_spotify)
age_counts <- sum(age_counts_mentalh, age_counts_spotify)
age_counts <- count(age_counts_mentalh, age_counts_spotify)
age_group_spotify_summary$Num_Responses <-
age_counts_mentalh <- df[table(filtered_Spotify$Age.group)]
age_group_spotify_summary$Num_Responses <- 0
for(i in length(age_counts_mentalh)){
age_group_spotify_summary$Num_Responses[i] <- age_counts_mentalh[i] + age_counts_spotify[i]
}
for(i in length(age_counts_mentalh)){
age_group_spotify_summary[i,"Num_Responses"] <- age_counts_mentalh[i] + age_counts_spotify[i]
}
age_counts_mentalh[1]
as.numeric(age_counts_mentalh[1])
for(i in length(age_counts_mentalh)){
age_group_spotify_summary[i,"Num_Responses"] <- as.numeric(age_counts_mentalh[i]) + as.numeric(age_counts_spotify[i])
}
View(age_group_spotify_summary)
age_group_spotify_summary[2,"Num_Responses"]
age_group_spotify_summary[2,"Num_Responses"] <- as.numeric(age_counts_mentalh[2]) + as.numeric(age_counts_spotify[2])
length(age_counts_mentalh)
for(i in 1:length(age_counts_mentalh)){
age_group_spotify_summary[i,"Num_Responses"] <- as.numeric(age_counts_mentalh[i]) + as.numeric(age_counts_spotify[i])
}
source("C:/repo/final-projects-samguern/main.R")
View(age_group_spotify_summary)
View(age_group_spotify_summary)
while_working_mentalh <- aggregate(While.working ~ Age.group, data = filtered_Spotify, sum)
while_working_mentalh <- aggregate(While.working ~ Age.group, data = filtered_Spotify, count)
while_working_mentalh <- aggregate(While.working ~ Age.group, data = filtered_Spotify, length)
View(while_working_mentalh)
while_working_mentalh <- table(filter(filtered_Spotify$Age.group, While.working == TRUE))
library(dplyr)
filter(filtered_Spotify, While.working == TRUE)
while_working_mentalh <- table(filter(filtered_Spotify, While.working == TRUE)$Age.group)
filter(filtered_Spotify, While.working == TRUE)
while_working_mentalh <- table(filter(filtered_Spotify, While.working == "Yes")$Age.group)
table(filter(filtered_Spotify, While.working == "Yes")$Age.group)
View(filtered_spofityData)
while_working_spotify <- table(filter(filtered_spofityData, str_detect(music_lis_frequency, "Office|Study"))$Age.group)
table(filter(filtered_spofityData, str_detect(music_lis_frequency, "Office|Study"))$Age.group)
filtered_spofity$music_lis_frequency
filtered_spotify$music_lis_frequency
filtered_spotifyData$music_lis_frequency
View(filtered_spofityData)
filtered_spofityData$music_lis_frequency
View(filtered_spofityData)
table(filter(filtered_spofityData , str_detect(music_lis_frequency, "Office|Study"))$Age.group)
filter(filtered_spofityData , str_detect(music_lis_frequency, "Office|Study"))
while_working_spotify <- table(filter(filtered_spofityData , str_detect(music_lis_frequency, "Office|Study"))$Age)
for(i in 1:length(while_working_mentalh)){
age_group_spotify_summary[i,"Listen_While_Working"] <- as.numeric(while_working_mentalh[i]) + as.numeric(while_working_spotify[i])
}
View(age_group_spotify_summary)
source("C:/repo/final-projects-samguern/main.R")
